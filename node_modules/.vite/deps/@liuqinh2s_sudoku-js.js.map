{
  "version": 3,
  "sources": ["../../@liuqinh2s/sudoku-js/bundle.js"],
  "sourcesContent": ["/**\r\n * \u8FD9\u4E2A\u821E\u8E48\u94FE\u6570\u636E\u7ED3\u6784\u7684\u8BBE\u8BA1\u5982\u4E0B\uFF1A\r\n * 1. \u53EA\u5B581\u8282\u70B9\uFF08\u7A00\u758F\u77E9\u9635\uFF09\r\n * 2. \u8F85\u52A9\u8282\u70B9\uFF1A\u603B\u8868\u5934head\uFF08\u4E00\u4E2A\u8282\u70B9\uFF0C\u53EF\u4EE5\u770B\u505A\u662F\u6574\u4E2A\u8868\u683C\u7684\u8D77\u70B9\uFF09\uFF0C\u5217\u5934columnHead\uFF08\u6BCF\u4E00\u5217\u90FD\u6709\u4E00\u4E2A\u5217\u5934\u8282\u70B9\uFF09\uFF0C\u884C\u5934rowHead\uFF08\u6BCF\u4E00\u884C\u90FD\u6709\u4E00\u4E2A\u884C\u5934\u8282\u70B9\uFF09\r\n */\r\n// \u94FE\u8868\u7684\u904D\u5386\u65B9\u5411\r\nvar Direction;\r\n(function (Direction) {\r\n  Direction[\"vertical\"] = \"vertical\";\r\n  Direction[\"horizontal\"] = \"horizontal\";\r\n})(Direction || (Direction = {}));\r\nclass DancingLinks {\r\n  constructor(sudoKu) {\r\n    this.deleteNodes = []; // \u5220\u9664\u7684\u8282\u70B9\r\n    this.ans = []; // \u7B54\u6848\u8BB0\u5F55\r\n    this.isAllOne = false; // \u6700\u540E\u4E00\u6B21\u5220\u9664\u7684\u884C\u662F\u5426\u51681\r\n    this.sudoKu = sudoKu;\r\n  }\r\n  inputMatrix(matrix) {\r\n    const head = this.build(matrix);\r\n    this.timer = new Date().getTime();\r\n    this.dance(head, head.down);\r\n    return this;\r\n  }\r\n  inputSet(X, S) {\r\n    const matrix = this.newMatrix(X, S);\r\n    this.inputMatrix(matrix);\r\n    return this;\r\n  }\r\n  /**\r\n   * \u9012\u5F52\u7F29\u5C0F\u95EE\u9898\u89C4\u6A21\r\n   * @param head \u8868\u5934\r\n   * @param p \u9009\u4E2D\u67D0\u884C\uFF0C\u9ED8\u8BA4\u9009\u62E91\u6700\u5C11\u7684\u5217\u7684\u5934\u4E00\u884C\r\n   * @returns\r\n   */\r\n  dance(head, p) {\r\n    if (head.right === head || head.down === head) {\r\n      // \u77E9\u9635\u4E3A\u7A7A\r\n      if (this.isAllOne) {\r\n        this.hasAns = true;\r\n        return true;\r\n      } else if (new Date().getTime() - this.timer > 1000) {\r\n        this.hasAns = false;\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n    if (!p) {\r\n      const columnHead = this.getMinColumn(head);\r\n      p = this.getRowHead(columnHead.down);\r\n    }\r\n    let res = false;\r\n    while (p !== head) {\r\n      this.ans.push(p.row);\r\n      const matrixWidth = this.getMatrixWidth(head);\r\n      this.isAllOne = matrixWidth === this.getMatrixWidth(p);\r\n      // \u5220\u9664\u64CD\u4F5C\r\n      const deleteNodes = this.remove(p, head);\r\n      this.deleteNodes.push(deleteNodes);\r\n      // this.showMatrix(head);\r\n      // this.showMatrixT(head);\r\n      if (this.dance(head)) {\r\n        res = true;\r\n        break;\r\n      }\r\n      this.ans.pop();\r\n      // \u6062\u590D\u64CD\u4F5C\r\n      this.recover(this.deleteNodes.pop());\r\n      p = p.down;\r\n    }\r\n    return res;\r\n  }\r\n  /**\r\n   * \u6839\u636E01\u77E9\u9635\uFF0C\u65B0\u5EFA\u4E00\u4E2Adancing links\r\n   * dancing links\u53EA\u8BB0\u5F551\r\n   * @param row \u884C\u6570\r\n   * @param column \u5217\u6570\r\n   */\r\n  build(matrix) {\r\n    this.matrix = matrix;\r\n    // \u5148\u521D\u59CB\u5316\u4E00\u4E2A\u8868\u5934\u5143\u7D20\r\n    const head = newHead();\r\n    // \u4E00\u7EC4\u5217\u5934\u5143\u7D20\u548C\u884C\u5934\u5143\u7D20\r\n    const columnHeadArray = newColumnHead(matrix, head);\r\n    const rowHeadArray = newRowHead(matrix, head);\r\n    for (let i = 0; i < matrix.length; i++) {\r\n      for (let j = 0; j < matrix[i].length; j++) {\r\n        if (matrix[i][j] == 1) {\r\n          const node = {\r\n            row: i,\r\n            column: j,\r\n            up: columnHeadArray[j].up,\r\n            down: columnHeadArray[j],\r\n            right: rowHeadArray[i],\r\n            left: rowHeadArray[i].left,\r\n          };\r\n          // \u4FEE\u6539\u4E0A\u4E0B\u5DE6\u53F3\u8282\u70B9\u7684\u6307\u9488\r\n          // \u5DE6\r\n          rowHeadArray[i].left.right = node;\r\n          // \u53F3\r\n          rowHeadArray[i].left = node;\r\n          // \u4E0A\r\n          columnHeadArray[j].up.down = node;\r\n          // \u4E0B\r\n          columnHeadArray[j].up = node;\r\n        }\r\n      }\r\n    }\r\n    this.head = head;\r\n    this.columnHeadArray = columnHeadArray;\r\n    this.rowHeadArray = rowHeadArray;\r\n    // this.showMatrix(head);\r\n    return head;\r\n    /**\r\n     * \u751F\u6210\u4E00\u4E2A\u8868\u5934\u8282\u70B9\r\n     */\r\n    function newHead() {\r\n      const head = {\r\n        right: null,\r\n        left: null,\r\n        up: null,\r\n        down: null,\r\n      };\r\n      head.right = head;\r\n      head.left = head;\r\n      head.up = head;\r\n      head.down = head;\r\n      return head;\r\n    }\r\n    /**\r\n     * \u751F\u6210\u5217\u5934\r\n     */\r\n    function newColumnHead(matrix, head) {\r\n      const columnHeadArray = {};\r\n      for (let i = 0; i < matrix[0].length; i++) {\r\n        const node = {\r\n          column: i,\r\n          right: head,\r\n          left: head.left,\r\n          up: null,\r\n          down: null,\r\n        };\r\n        node.up = node;\r\n        node.down = node;\r\n        head.left.right = node;\r\n        head.left = node;\r\n        columnHeadArray[i] = node;\r\n      }\r\n      return columnHeadArray;\r\n    }\r\n    /**\r\n     * \u751F\u6210\u884C\u5934\r\n     */\r\n    function newRowHead(matrix, head) {\r\n      const rowHeadArray = {};\r\n      for (let i = 0; i < matrix.length; i++) {\r\n        const node = {\r\n          row: i,\r\n          right: null,\r\n          left: null,\r\n          down: head,\r\n          up: head.up,\r\n        };\r\n        node.right = node;\r\n        node.left = node;\r\n        head.up.down = node;\r\n        head.up = node;\r\n        rowHeadArray[i] = node;\r\n      }\r\n      return rowHeadArray;\r\n    }\r\n  }\r\n  newMatrix(X, S) {\r\n    let res = [];\r\n    for (let i = 0; i < S.length; i++) {\r\n      let row = new Array(X.length).fill(0);\r\n      for (let j = 0; j < S[i].length; j++) {\r\n        row[X.indexOf(S[i][j])] = 1;\r\n      }\r\n      res.push(row);\r\n    }\r\n    return res;\r\n  }\r\n  /**\r\n   * \u83B7\u53D6\u4E00\u884C\u6570\u636E\r\n   * @param rowHead\r\n   */\r\n  getRow(rowHead) {\r\n    const matrixWidth = this.getMatrixWidth(this.head);\r\n    if (matrixWidth < 1) {\r\n      return [];\r\n    }\r\n    let row = new Array(matrixWidth).fill(0);\r\n    let node = rowHead.right;\r\n    while (node !== rowHead) {\r\n      const columnHead = this.getColumnHead(node);\r\n      const index = this.getColumnIndex(columnHead);\r\n      row[index] = 1;\r\n      node = node.right;\r\n    }\r\n    return row;\r\n  }\r\n  /**\r\n   * \u83B7\u53D6\u4E00\u5217\u6570\u636E\r\n   * @param columnHead\r\n   */\r\n  getColumn(columnHead) {\r\n    const matrixHeight = this.getMatrixHeight(this.head);\r\n    if (matrixHeight < 1) {\r\n      return [];\r\n    }\r\n    let res = new Array(matrixHeight).fill(0);\r\n    let node = columnHead.down;\r\n    while (node !== columnHead) {\r\n      const rowHead = this.getRowHead(node);\r\n      const index = this.getRowIndex(rowHead);\r\n      res[index] = 1;\r\n      node = node.down;\r\n    }\r\n    return res;\r\n  }\r\n  remove(p, head) {\r\n    // \u5220\u9664\u76F8\u5E94\u7684\u5217\r\n    const nodes1 = this.removeAllColumn(p);\r\n    // this.showMatrix(head);\r\n    // \u5220\u9664\u76F8\u5E94\u884C\r\n    const nodes2 = [...nodes1];\r\n    for (let i = 0; i < nodes1.length; i++) {\r\n      if (!nodes1[i].hasOwnProperty(\"row\")) {\r\n        const nodes = this.removeAllRow(nodes1[i]);\r\n        nodes2.push(...nodes);\r\n      }\r\n    }\r\n    // this.showMatrix(head);\r\n    return [...new Set(nodes2)];\r\n  }\r\n  /**\r\n   * \u5220\u9664\u67D0\u884C\u5173\u8054\u7684\u6240\u6709\u5217\r\n   * @param node \u4E00\u884C\u4E2D\u7684\u67D0\u4E2A\u8282\u70B9\r\n   */\r\n  removeAllColumn(node) {\r\n    const rowHead = this.rowHeadArray[node.row];\r\n    let p = rowHead;\r\n    const res = [];\r\n    while (true) {\r\n      const deleteNodes = this.removeColumn(p);\r\n      res.push(...deleteNodes);\r\n      p = p.right;\r\n      if (p === rowHead) {\r\n        break;\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n  /**\r\n   * \u5220\u9664\u67D0\u5217\u5173\u8054\u7684\u6240\u6709\u884C\r\n   * @param node\r\n   */\r\n  removeAllRow(node) {\r\n    const columnHead = this.columnHeadArray[node.column];\r\n    let p = columnHead;\r\n    const res = [];\r\n    while (true) {\r\n      const deleteNodes = this.removeRow(p);\r\n      res.push(...deleteNodes);\r\n      p = p.down;\r\n      if (p === node) {\r\n        break;\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n  /**\r\n   * \u5220\u9664\u4E00\u5217\r\n   * @param curNode \u4E00\u5217\u4E2D\u7684\u67D0\u4E2A\u8282\u70B9\r\n   */\r\n  removeColumn(node) {\r\n    // \u7ED9\u5B9A\u8FD9\u4E2A\u8282\u70B9\u4E0D\u80FD\u4E3A\u7A7A\uFF0C\u4E14\u5FC5\u987B\u6709column\u5C5E\u6027\uFF08\u884C\u5934\u6CA1\u6709column\u5C5E\u6027\uFF0C\u4E0D\u5E94\u8BE5\u5220\u9664\u884C\u8868\u5934\u90A3\u4E00\u5217\uFF09\r\n    if (!node || !node.hasOwnProperty(\"column\")) {\r\n      return [];\r\n    }\r\n    if (this.isColumnDeleted(node)) {\r\n      return [];\r\n    }\r\n    const columnHead = this.columnHeadArray[node.column];\r\n    let p = columnHead;\r\n    const res = [];\r\n    while (true) {\r\n      if (p.left.right === p && p.right.left === p) {\r\n        p.left.right = p.right;\r\n        p.right.left = p.left;\r\n        res.push(p);\r\n      }\r\n      p = p.down;\r\n      if (p === columnHead) {\r\n        break;\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n  /**\r\n   * \u5220\u9664\u4E00\u884C\r\n   * @param node \u4E00\u884C\u4E2D\u7684\u67D0\u4E2A\u8282\u70B9\r\n   * @returns\r\n   */\r\n  removeRow(node) {\r\n    if (!node || !node.hasOwnProperty(\"row\")) {\r\n      return [];\r\n    }\r\n    if (this.isRowDeleted(node)) {\r\n      return [];\r\n    }\r\n    const rowHead = this.rowHeadArray[node.row];\r\n    let p = rowHead;\r\n    const res = [];\r\n    while (true) {\r\n      if (p.up.down === p && p.down.up === p) {\r\n        p.up.down = p.down;\r\n        p.down.up = p.up;\r\n        res.push(p);\r\n      }\r\n      p = p.right;\r\n      if (p == rowHead) {\r\n        break;\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n  /**\r\n   * \u5224\u65AD\u4E00\u884C\u662F\u5426\u5DF2\u7ECF\u79FB\u9664\r\n   * @param rowHead\r\n   */\r\n  isRowDeleted(node) {\r\n    if (!node || !node.hasOwnProperty(\"row\")) {\r\n      console.error(\"\u8282\u70B9\u4E0D\u5408\u7406:\", node);\r\n    }\r\n    const rowHead = this.rowHeadArray[node.row];\r\n    let p = this.head.down;\r\n    while (p !== this.head) {\r\n      if (p === rowHead) {\r\n        return false;\r\n      }\r\n      p = p.down;\r\n    }\r\n    return true;\r\n  }\r\n  /**\r\n   * \u5224\u65AD\u4E00\u5217\u662F\u5426\u88AB\u79FB\u9664\r\n   * @param node\r\n   * @returns\r\n   */\r\n  isColumnDeleted(node) {\r\n    if (!node || !node.hasOwnProperty(\"column\")) {\r\n      console.error(\"\u8282\u70B9\u4E0D\u5408\u7406:\", node);\r\n    }\r\n    const columnHead = this.columnHeadArray[node.column];\r\n    let p = this.head.right;\r\n    while (p !== this.head) {\r\n      if (p === columnHead) {\r\n        return false;\r\n      }\r\n      p = p.right;\r\n    }\r\n    return true;\r\n  }\r\n  /**\r\n   * \u6062\u590D\u8282\u70B9\r\n   * @param columnHead \u5217\u5934\u8282\u70B9\r\n   * @returns\r\n   */\r\n  recover(nodes) {\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      const p = nodes[i];\r\n      p.left.right = p;\r\n      p.right.left = p;\r\n      p.down.up = p;\r\n      p.up.down = p;\r\n    }\r\n  }\r\n  /**\r\n   * \u83B7\u53D61\u6700\u5C11\u7684\u5217\r\n   * @param head\r\n   * @returns \u8FD4\u56DE\u8BE5\u5217\u7684\u5217\u5934\u8282\u70B9\r\n   */\r\n  getMinColumn(head) {\r\n    let curNode = head.right;\r\n    let min = this.getLinkedListLength(curNode, Direction.vertical) - 1;\r\n    let minColumnHead = curNode;\r\n    while (curNode !== head) {\r\n      curNode = curNode.right;\r\n      const length = this.getLinkedListLength(curNode, Direction.vertical) - 1;\r\n      if (length > 0 && min > length) {\r\n        min = length;\r\n        minColumnHead = curNode;\r\n      }\r\n    }\r\n    return minColumnHead;\r\n  }\r\n  /**\r\n   * \u968F\u4FBF\u7ED9\u5B9A\u4E00\u4E2A\u975E\u8868\u5934\u8282\u70B9\uFF0C\u8FD4\u56DE\u5217\u5934\r\n   * @param node\r\n   */\r\n  getColumnHead(node) {\r\n    let p = node;\r\n    while (p.hasOwnProperty(\"row\")) {\r\n      p = p.down;\r\n    }\r\n    return p;\r\n  }\r\n  /**\r\n   * \u968F\u4FBF\u7ED9\u5B9A\u4E00\u4E2A\u975E\u8868\u5934\u8282\u70B9\uFF0C\u8FD4\u56DE\u884C\u5934\r\n   * @param node\r\n   * @returns\r\n   */\r\n  getRowHead(node) {\r\n    let p = node;\r\n    while (p.hasOwnProperty(\"column\")) {\r\n      p = p.right;\r\n    }\r\n    return p;\r\n  }\r\n  /**\r\n   * \u8FD4\u56DE\u5217\u5934\u7684\u5750\u6807\r\n   * @param columnHead\r\n   */\r\n  getColumnIndex(columnHead) {\r\n    let p = this.head;\r\n    let index = -1;\r\n    while (p !== columnHead) {\r\n      p = p.right;\r\n      index++;\r\n    }\r\n    return index;\r\n  }\r\n  /**\r\n   * \u8FD4\u56DE\u884C\u5934\u7684\u5750\u6807\r\n   * @param rowHead\r\n   * @returns\r\n   */\r\n  getRowIndex(rowHead) {\r\n    let p = this.head;\r\n    let index = -1;\r\n    while (p !== rowHead) {\r\n      p = p.down;\r\n      index++;\r\n    }\r\n    return index;\r\n  }\r\n  /**\r\n   * \u6253\u5370\u5F53\u524D\u77E9\u9635\r\n   * @param head\r\n   */\r\n  showMatrix(head) {\r\n    let p = head.down;\r\n    let res = [];\r\n    while (p !== head) {\r\n      const rowCount = this.getMatrixHeight(head);\r\n      if (rowCount > 0) {\r\n        const row = this.getRow(p);\r\n        res.push(row);\r\n      }\r\n      p = p.down;\r\n    }\r\n    console.log(res);\r\n  }\r\n  /**\r\n   * \u6309\u5217\u6253\u5370\uFF08\u8F6C\u7F6E\u77E9\u9635\uFF09\r\n   * @param head\r\n   */\r\n  showMatrixT(head) {\r\n    let p = head.right;\r\n    let res = [];\r\n    while (p !== head) {\r\n      const columnCount = this.getMatrixWidth(head);\r\n      if (columnCount > 0) {\r\n        const column = this.getColumn(p);\r\n        res.push(column);\r\n      }\r\n      p = p.right;\r\n    }\r\n    console.log(res);\r\n  }\r\n  /**\r\n   * \u83B7\u53D6\u94FE\u8868\u957F\u5EA6\r\n   * @param node \u5F53\u524D\u884C\u7684\u67D0\u4E2A\u8282\u70B9\r\n   */\r\n  getLinkedListLength(node, direction) {\r\n    if (!node) {\r\n      return 0;\r\n    }\r\n    let p = node;\r\n    let length = 0;\r\n    while (true) {\r\n      p = direction === Direction.horizontal ? p.right : p.down;\r\n      length++;\r\n      if (p === node) {\r\n        break;\r\n      }\r\n    }\r\n    return length;\r\n  }\r\n  /**\r\n   * \u83B7\u53D6\u5F53\u524D\u77E9\u9635\u7684\u5BBD\uFF08\u4E00\u884C\u591A\u5C11\u4E2A\u5143\u7D20\uFF0C\u5305\u62EC0\u548C1\uFF09\r\n   * @param head \u5F53\u524D\u884C\u7684\u67D0\u4E2A\u8282\u70B9\r\n   */\r\n  getMatrixWidth(head) {\r\n    return this.getLinkedListLength(head, Direction.horizontal) - 1;\r\n  }\r\n  /**\r\n   * \u83B7\u53D6\u5F53\u524D\u77E9\u9635\u7684\u9AD8\uFF08\u4E00\u5217\u591A\u5C11\u4E2A\u5143\u7D20\uFF0C\u5305\u62EC0\u548C1\uFF09\r\n   * @param head \u5F53\u524D\u884C\u7684\u67D0\u4E2A\u8282\u70B9\r\n   */\r\n  getMatrixHeight(head) {\r\n    return this.getLinkedListLength(head, Direction.vertical) - 1;\r\n  }\r\n}\r\n// test();\r\n\r\nclass SudoKu {\r\n  /**\r\n   * \u751F\u6210\u6570\u72EC\u89E3\u7A7A\u95F4\uFF1A729*324\u768401\u77E9\u9635\r\n   * \u7528\u821E\u8E48\u94FE\u6765\u8868\u793A\u8FD9\u4E2A\u77E9\u9635\r\n   */\r\n  static build(matrix) {\r\n    // \u884C\r\n    for (let i = 0; i < 9; i++) {\r\n      // \u5217\r\n      for (let j = 0; j < 9; j++) {\r\n        // 9\u4E2A\u6570\r\n        for (let k = 1; k <= 9; k++) {\r\n          const section1 = new Array(81).fill(0);\r\n          section1[i * 9 + j] = 1;\r\n          const section2 = new Array(81).fill(0);\r\n          section2[i * 9 + k - 1] = 1;\r\n          const section3 = new Array(81).fill(0);\r\n          section3[j * 9 + k - 1] = 1;\r\n          const section4 = new Array(81).fill(0);\r\n          section4[(Math.floor(i / 3) + Math.floor(j / 3) * 3) * 9 + k - 1] = 1;\r\n          matrix.push([...section1, ...section2, ...section3, ...section4]);\r\n        }\r\n      }\r\n    }\r\n    return matrix;\r\n  }\r\n  /**\r\n   * \u628A\u6570\u72EC\u56FE\u8F6C\u4E3A\u7CBE\u786E\u8986\u76D6\u95EE\u989801\u77E9\u9635\u7684\u4E00\u884C\r\n   * @param sudoKu\r\n   * @returns\r\n   */\r\n  static sudoKu2ExactCoverLine(sudoKu) {\r\n    const section1 = new Array(81).fill(0);\r\n    const section2 = new Array(81).fill(0);\r\n    const section3 = new Array(81).fill(0);\r\n    const section4 = new Array(81).fill(0);\r\n    // \u884C\r\n    for (let i = 0; i < 9; i++) {\r\n      // \u5217\r\n      for (let j = 0; j < 9; j++) {\r\n        const k = sudoKu[i][j];\r\n        if (k > 0 && k <= 9) {\r\n          section1[i * 9 + j] = 1;\r\n          section2[i * 9 + k - 1] = 1;\r\n          section3[j * 9 + k - 1] = 1;\r\n          section4[(Math.floor(i / 3) + Math.floor(j / 3) * 3) * 9 + k - 1] = 1;\r\n        }\r\n      }\r\n    }\r\n    return [...section1, ...section2, ...section3, ...section4];\r\n  }\r\n  /**\r\n   * \u6839\u636E\u7CBE\u786E\u8986\u76D6\u95EE\u989801\u77E9\u9635\u548C\u7B54\u6848\u53CD\u63A8\u6570\u72EC\u56FE\r\n   * @param sudoKu\r\n   * @param matrix\r\n   * @param ans\r\n   */\r\n  static exactCoverMatrix2SudoKuMatrix(matrix, ans, sudoKu) {\r\n    if (!sudoKu) {\r\n      sudoKu = SudoKu.buildEmptySudoKu();\r\n    } else {\r\n      sudoKu = JSON.parse(JSON.stringify(sudoKu));\r\n    }\r\n    for (let i = 1; i < ans.length; i++) {\r\n      const line = matrix[ans[i]];\r\n      let row, column;\r\n      for (let j = 0; j < 81; j++) {\r\n        // \u4ECE\u5750\u6807\u533A\u57DF\u627E\u67D0\u4E2A\u5750\u6807\u662F\u5426\u586B\u4E86\u6570\u5B57\r\n        if (line[j] === 1) {\r\n          row = Math.floor(j / 9);\r\n          column = j % 9;\r\n        }\r\n      }\r\n      let number;\r\n      // \u4ECE\u884C\u533A\u57DF\u627E\u67D0\u884C\u586B\u4E86\u54EA\u4E2A\u6570\u5B57\r\n      for (let j = 81 + row * 9; j < 81 + row * 9 + 9; j++) {\r\n        if (line[j] === 1) {\r\n          number = j - 81 - row * 9 + 1;\r\n        }\r\n      }\r\n      if (number > 0) {\r\n        sudoKu[row][column] = number;\r\n      }\r\n    }\r\n    console.log(\"\u6570\u72EC\u56FE:\", JSON.stringify(sudoKu));\r\n    return sudoKu;\r\n  }\r\n  /**\r\n   * \u521B\u5EFA\u7A7A\u7684\u6570\u72EC\r\n   */\r\n  static buildEmptySudoKu() {\r\n    let res = [];\r\n    for (let i = 0; i < 9; i++) {\r\n      res.push(new Array(9).fill(0));\r\n    }\r\n    return res;\r\n  }\r\n  /**\r\n   * \u5224\u65AD\u4E00\u5E45\u5B8C\u6210\u7684\u6570\u72EC\u56FE\u662F\u5426\u662F\u6B63\u786E\u7684\r\n   * @param sudoKu\r\n   */\r\n  static verify(sudoKu) {\r\n    const arr = SudoKu.sudoKu2ExactCoverLine(sudoKu);\r\n    for (let i = 0; i < arr.length; i++) {\r\n      if (arr[i] !== 1) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  static solve(sudoKu) {\r\n    const matrix = [SudoKu.sudoKu2ExactCoverLine(sudoKu)];\r\n    SudoKu.build(matrix);\r\n    const dancingLinks = new DancingLinks(sudoKu).inputMatrix(matrix);\r\n    if (dancingLinks.hasAns) {\r\n      const res = SudoKu.exactCoverMatrix2SudoKuMatrix(\r\n        matrix,\r\n        dancingLinks.ans,\r\n        sudoKu\r\n      );\r\n      if (SudoKu.verify(res)) {\r\n        return res;\r\n      } else {\r\n        return null;\r\n      }\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  /**\r\n   * \u968F\u673A\u653E\u516511\u4E2A\u6570\uFF0C1\u52309\uFF0C\u7136\u540E1\u52302\uFF0C\u7136\u540E\u6C42\u89E3\uFF0C\u5F97\u5230\u4E00\u5E45\u968F\u673A\u6570\u72EC\u5B8C\u6210\u56FE\uFF08\u6709\u89E3\u7684\u6982\u7387\u7EA699.7%\uFF09\r\n   */\r\n  static getCompleteSudoKu() {\r\n    const sudoKu = SudoKu.buildEmptySudoKu();\r\n    for (let i = 0; i < 11; i++) {\r\n      const row = SudoKu.random0To8();\r\n      const column = SudoKu.random0To8();\r\n      sudoKu[row][column] = (i % 9) + 1;\r\n    }\r\n    console.log(\"\u968F\u673A\u56FE\uFF1A\", sudoKu);\r\n    const res = SudoKu.solve(sudoKu);\r\n    return res ? res : SudoKu.getCompleteSudoKu();\r\n  }\r\n  /**\r\n   * \u901A\u8FC7\u4E00\u4E2A\u5B8C\u6574\u7684\u6570\u72EC\u56FE\uFF0C\u6316\u6D1E\u751F\u6210\u4E00\u4E2A\u7B80\u5355\u7684\u6570\u72EC\u56FE\r\n   */\r\n  static getEasySudoKu() {\r\n    const sudoKu = SudoKu.getCompleteSudoKu();\r\n    for (let i = 0; i < 9; i++) {\r\n      for (let j = 0; j < 9; j++) {\r\n        if (Math.random() > 0.4) {\r\n          sudoKu[i][j] = 0;\r\n        }\r\n      }\r\n    }\r\n    return sudoKu;\r\n  }\r\n  /**\r\n   * \u968F\u673A\u8FD4\u56DE0\u52308\r\n   */\r\n  static random0To8() {\r\n    return Math.floor(Math.random() * 9);\r\n  }\r\n}\r\nfunction test() {\r\n  // 43\u4E2A\u7A7A\u683C\r\n  const testData = [\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [8, 0, 1, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 5, 0, 0, 0, 0, 0, 0],\r\n    [0, 2, 0, 6, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 4, 0, 0, 0, 0, 0],\r\n    [2, 0, 0, 0, 0, 1, 0, 0, 0],\r\n    [0, 7, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 9, 0, 0, 0, 0, 3, 0, 0],\r\n  ];\r\n  SudoKu.solve(testData);\r\n  console.log(\"\u968F\u673A\u751F\u6210\u4E00\u4E2A\u6570\u72EC:\", SudoKu.getEasySudoKu());\r\n}\r\n// test();\r\n\r\nexport { SudoKu, test };\r\n"],
  "mappings": "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",
  "names": ["Direction", "head", "matrix", "columnHeadArray", "rowHeadArray"]
}
